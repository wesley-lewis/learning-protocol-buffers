// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: employee.proto

package grpc_emp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeInfoClient is the client API for EmployeeInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeInfoClient interface {
	Get(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*Employee, error)
	Set(ctx context.Context, in *SetEmployeeRequest, opts ...grpc.CallOption) (*SetEmployeeResponse, error)
	GetAll(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type employeeInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeInfoClient(cc grpc.ClientConnInterface) EmployeeInfoClient {
	return &employeeInfoClient{cc}
}

func (c *employeeInfoClient) Get(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/EmployeeInfo/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeInfoClient) Set(ctx context.Context, in *SetEmployeeRequest, opts ...grpc.CallOption) (*SetEmployeeResponse, error) {
	out := new(SetEmployeeResponse)
	err := c.cc.Invoke(ctx, "/EmployeeInfo/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeInfoClient) GetAll(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/EmployeeInfo/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeInfoServer is the server API for EmployeeInfo service.
// All implementations must embed UnimplementedEmployeeInfoServer
// for forward compatibility
type EmployeeInfoServer interface {
	Get(context.Context, *GetEmployeeRequest) (*Employee, error)
	Set(context.Context, *SetEmployeeRequest) (*SetEmployeeResponse, error)
	GetAll(context.Context, *GetEmployeeRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedEmployeeInfoServer()
}

// UnimplementedEmployeeInfoServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeInfoServer struct {
}

func (UnimplementedEmployeeInfoServer) Get(context.Context, *GetEmployeeRequest) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEmployeeInfoServer) Set(context.Context, *SetEmployeeRequest) (*SetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedEmployeeInfoServer) GetAll(context.Context, *GetEmployeeRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEmployeeInfoServer) mustEmbedUnimplementedEmployeeInfoServer() {}

// UnsafeEmployeeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeInfoServer will
// result in compilation errors.
type UnsafeEmployeeInfoServer interface {
	mustEmbedUnimplementedEmployeeInfoServer()
}

func RegisterEmployeeInfoServer(s grpc.ServiceRegistrar, srv EmployeeInfoServer) {
	s.RegisterService(&EmployeeInfo_ServiceDesc, srv)
}

func _EmployeeInfo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeInfoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeInfo/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeInfoServer).Get(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeInfo_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeInfoServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeInfo/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeInfoServer).Set(ctx, req.(*SetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeInfo_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeInfoServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeInfo/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeInfoServer).GetAll(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeInfo_ServiceDesc is the grpc.ServiceDesc for EmployeeInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeInfo",
	HandlerType: (*EmployeeInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EmployeeInfo_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _EmployeeInfo_Set_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EmployeeInfo_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee.proto",
}
